<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cosmic Defender: Sigma Evolution Ultimate</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap');
        * { box-sizing: border-box; margin: 0; padding: 0; }
        body {
            font-family: 'Orbitron', sans-serif;
            background-color: #000;
            color: #0ff;
            overflow: hidden;
        }
        #gameCanvas {
            position: absolute;
            top: 0;
            left: 0;
        }
        #ui, #leaderboard {
            position: absolute;
            background: rgba(0,0,0,0.7);
            padding: 10px;
            border-radius: 5px;
            z-index: 10;
        }
        #ui {
            top: 10px;
            left: 10px;
            font-size: 18px;
        }
        #leaderboard {
            top: 10px;
            right: 10px;
            max-height: 300px;
            overflow-y: auto;
            display: none;
        }
        .button {
            background-color: #0ff;
            color: #000;
            border: none;
            padding: 10px 20px;
            margin: 5px;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s;
        }
        .button:hover {
            background-color: #00ffff;
            transform: scale(1.1);
        }
        #powerMeter, #bossMeter {
            position: absolute;
            bottom: 10px;
            left: 50%;
            transform: translateX(-50%);
            width: 300px;
            height: 20px;
            background: rgba(0,0,0,0.5);
            border: 1px solid #0ff;
        }
        #bossMeter {
            bottom: 40px;
            border-color: #f00;
        }
        #powerFill, #bossFill {
            width: 0%;
            height: 100%;
            transition: width 0.3s;
        }
        #powerFill { background: #0ff; }
        #bossFill { background: #f00; }
        #gameOver, #titleScreen, #characterSelect, #modeSelect {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        #gameOver h2, #titleScreen h1, #characterSelect h2, #modeSelect h2 {
            font-size: 48px;
            margin-bottom: 20px;
            text-align: center;
            color: #0ff;
            text-shadow: 0 0 10px #0ff;
        }
        #gameLog {
            position: absolute;
            bottom: 40px;
            left: 10px;
            width: 300px;
            height: 150px;
            background: rgba(0,0,0,0.7);
            border: 1px solid #0ff;
            overflow-y: auto;
            padding: 10px;
            font-size: 14px;
        }
        #gameLog p {
            margin: 5px 0;
        }
        .paused::after {
            content: "PAUSED";
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 48px;
            color: #0ff;
            text-shadow: 0 0 10px #0ff;
        }
        #upgradeMenu {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0,0,0,0.9);
            padding: 20px;
            border-radius: 10px;
            z-index: 1000;
            max-height: 80vh;
            overflow-y: auto;
            display: none;
        }
        #timeStopBtn {
            position: absolute;
            bottom: 10px;
            right: 10px;
            z-index: 10;
        }
        #cooldownIndicator, #abilityIndicator {
            position: absolute;
            right: 10px;
            font-size: 14px;
            color: #0ff;
        }
        #cooldownIndicator { bottom: 50px; }
        #abilityIndicator { bottom: 90px; }
    </style>
</head>
<body>
    <div id="titleScreen">
        <h1>Cosmic Defender:<br>Sigma Evolution Ultimate</h1>
        <button id="startBtn" class="button">Start Game</button>
    </div>
    <div id="modeSelect" style="display: none;">
        <h2>Select Game Mode</h2>
        <button id="survivalBtn" class="button">Survival Mode</button>
        <button id="bossBtn" class="button">Boss Mode</button>
    </div>
    <div id="characterSelect" style="display: none;">
        <h2>Choose Your Character</h2>
        <button id="defaultBtn" class="button">Default</button>
        <button id="shotgunnerBtn" class="button">Shotgunner</button>
        <button id="assassinBtn" class="button">Assassin</button>
    </div>
    <canvas id="gameCanvas"></canvas>
    <div id="ui">
        <div>Level: <span id="levelDisplay">1</span></div>
        <div>Points: <span id="pointsDisplay">0</span></div>
        <div>DPS: <span id="dpsDisplay">0</span></div>
    </div>
    <div id="powerMeter"><div id="powerFill"></div></div>
    <div id="bossMeter" style="display: none;"><div id="bossFill"></div></div>
    <div id="gameOver" style="display: none;">
        <h2>Game Over</h2>
        <p>Your Score: <span id="finalScore"></span></p>
        <button id="restartBtn" class="button">Restart</button>
    </div>
    <div id="gameLog"></div>
    <div id="leaderboard"></div>
    <button id="leaderboardBtn" class="button" style="position: absolute; top: 50px; right: 10px;">Leaderboard</button>
    <button id="upgradeBtn" class="button" style="position: absolute; top: 90px; right: 10px;">Upgrades</button>
    <div id="upgradeMenu"></div>
    <button id="timeStopBtn" class="button">Time Stop</button>
    <div id="cooldownIndicator"></div>
    <div id="abilityIndicator"></div>

    <script>
        // Game variables
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const powerFill = document.getElementById('powerFill');
        const bossFill = document.getElementById('bossFill');
        const gameOverScreen = document.getElementById('gameOver');
        const finalScoreDisplay = document.getElementById('finalScore');
        const restartBtn = document.getElementById('restartBtn');
        const titleScreen = document.getElementById('titleScreen');
        const modeSelect = document.getElementById('modeSelect');
        const characterSelect = document.getElementById('characterSelect');
        const startBtn = document.getElementById('startBtn');
        const survivalBtn = document.getElementById('survivalBtn');
        const bossBtn = document.getElementById('bossBtn');
        const defaultBtn = document.getElementById('defaultBtn');
        const shotgunnerBtn = document.getElementById('shotgunnerBtn');
        const assassinBtn = document.getElementById('assassinBtn');
        const leaderboardDiv = document.getElementById('leaderboard');
        const leaderboardBtn = document.getElementById('leaderboardBtn');
        const upgradeBtn = document.getElementById('upgradeBtn');
        const upgradeMenu = document.getElementById('upgradeMenu');
        const timeStopBtn = document.getElementById('timeStopBtn');
        const abilityIndicator = document.getElementById('abilityIndicator');

        let width, height, centerX, centerY;
        let particles = [];
        let enemies = [];
        let projectiles = [];
        let meteors = [];
        let upgrades = {};
        let level = 1;
        let points = 0;
        let dps = 0;
        let powerMeter = 0;
        let isGameOver = false;
        let lastShotTime = 0;
        let difficulty = .7;
        let isPaused = false;
        let isHackEnabled = false;
        let animationFrameId = null;
        let isTimeStopActive = false;
        let timeStopCooldown = 0;
        let timeStopDuration = 5000;
        let timeStopMaxUses = 1;
        let timeStopUsesLeft = 1;
        let lastPowerMeterIncrease = Date.now();
        let playerCharacter = null;
        let isBossMode = false;
        let boss = null;

        const UPGRADE_TYPES = {
            DAMAGE: 'damage',
            FIRE_RATE: 'fireRate',
            PROJECTILE_SPEED: 'projectileSpeed',
            MULTI_SHOT: 'multiShot',
            HOMING: 'homing',
            PIERCING: 'piercing',
            EXPLOSION: 'explosion',
            CHAIN_LIGHTNING: 'chainLightning',
            TIME_SLOW: 'timeSlow',
            SHIELD: 'shield',
            BLACK_HOLE: 'blackHole',
            LASER_BEAM: 'laserBeam',
            QUANTUM_LEAP: 'quantumLeap',
            METEOR_SHOWER: 'meteorShower',
            BOUNCE: 'bounce',
            DOUBLE_POINTS: 'doublePoints',
            STEALTH_DURATION: 'stealthDuration'
        };

        const upgradeDefinitions = [
            { type: UPGRADE_TYPES.DAMAGE, name: 'Increase Damage', baseCost: 10, scaling: 1.5 },
            { type: UPGRADE_TYPES.FIRE_RATE, name: 'Increase Fire Rate', baseCost: 15, scaling: 1.6 },
            { type: UPGRADE_TYPES.PROJECTILE_SPEED, name: 'Increase Projectile Speed', baseCost: 20, scaling: 1.4 },
            { type: UPGRADE_TYPES.MULTI_SHOT, name: 'Add Multi-Shot', baseCost: 50, scaling: 2 },
            { type: UPGRADE_TYPES.HOMING, name: 'Homing Projectiles', baseCost: 100, scaling: 2.5 },
            { type: UPGRADE_TYPES.PIERCING, name: 'Piercing Projectiles', baseCost: 75, scaling: 2.2 },
            { type: UPGRADE_TYPES.EXPLOSION, name: 'Explosive Projectiles', baseCost: 150, scaling: 2.8 },
            { type: UPGRADE_TYPES.CHAIN_LIGHTNING, name: 'Chain Lightning', baseCost: 200, scaling: 3 },
            { type: UPGRADE_TYPES.TIME_SLOW, name: 'Time Manipulation', baseCost: 250, scaling: 3.5 },
            { type: UPGRADE_TYPES.SHIELD, name: 'Energy Shield', baseCost: 300, scaling: 3.2 },
            { type: UPGRADE_TYPES.BLACK_HOLE, name: 'Black Hole Generator', baseCost: 500, scaling: 4 },
            { type: UPGRADE_TYPES.LASER_BEAM, name: 'Omega Laser Beam', baseCost: 750, scaling: 4.5 },
            { type: UPGRADE_TYPES.QUANTUM_LEAP, name: 'Quantum Leap Drive', baseCost: 1000, scaling: 5 },
            { type: UPGRADE_TYPES.METEOR_SHOWER, name: 'Meteor Shower', baseCost: 1200, scaling: 5.5 },
            { type: UPGRADE_TYPES.BOUNCE, name: 'Bouncing Projectiles (Shotgunner)', baseCost: 100, scaling: 2 },
            { type: UPGRADE_TYPES.DOUBLE_POINTS, name: 'Double Points (Default)', baseCost: 200, scaling: 2.5 },
            { type: UPGRADE_TYPES.STEALTH_DURATION, name: 'Increase Stealth Duration (Assassin)', baseCost: 150, scaling: 2.2 }
        ];

        class Character {
            constructor(name, baseDamage, fireRate, projectileSpeed) {
                this.name = name;
                this.baseDamage = baseDamage;
                this.fireRate = fireRate;
                this.projectileSpeed = projectileSpeed;
            }

            createProjectile(x, y, angle, damage, speed) {
                return {
                    x, y,
                    radius: 5,
                    velocity: {
                        x: Math.cos(angle) * speed,
                        y: Math.sin(angle) * speed
                    },
                    color: '#fff',
                    damage: damage,
                    pierceCount: 1 + upgrades[UPGRADE_TYPES.PIERCING].level
                };
            }

            shoot(x, y, targetX, targetY) {
                const angle = Math.atan2(targetY - y, targetX - x);
                const damage = this.baseDamage * (1 + 0.1 * upgrades[UPGRADE_TYPES.DAMAGE].level);
                const speed = this.projectileSpeed * (1 + 0.1 * upgrades[UPGRADE_TYPES.PROJECTILE_SPEED].level);
                return this.createProjectile(x, y, angle, damage, speed);
            }

            update() {
                // Default update method
            }
        }

        class DefaultCharacter extends Character {
            constructor() {
                super('Default', 10, 500, 5);
                this.doublePointsActive = false;
            }

            shoot(x, y, targetX, targetY) {
                const projectile = super.shoot(x, y, targetX, targetY);
                if (this.doublePointsActive) {
                    projectile.doublePoints = true;
                }
                return projectile;
            }

            update() {
                abilityIndicator.textContent = `Double Points: ${this.doublePointsActive ? 'Active' : 'Ready'}`;
            }
        }

        class Shotgunner extends Character {
            constructor() {
                super('Shotgunner', 5, 1000, 6);
                this.pelletCount = 8;
                this.spreadAngle = Math.PI / 8;
                this.bounceCount = 0;
            }

            shoot(x, y, targetX, targetY) {
                const angle = Math.atan2(targetY - y, targetX - x);
                const damage = this.baseDamage * (1 + 0.1 * upgrades[UPGRADE_TYPES.DAMAGE].level);
                const speed = this.projectileSpeed * (1 + 0.1 * upgrades[UPGRADE_TYPES.PROJECTILE_SPEED].level);
                const pellets = [];

                for (let i = 0; i < this.pelletCount; i++) {
                    const spreadAngle = (i / (this.pelletCount - 1) - 0.5) * this.spreadAngle;
                    const pellet = this.createProjectile(x, y, angle + spreadAngle, damage, speed);
                    pellet.bounceCount = this.bounceCount;
                    pellets.push(pellet);
                }

                return pellets;
            }

            update() {
                abilityIndicator.textContent = `Bounces: ${this.bounceCount}`;
            }
        }

        class Assassin extends Character {
            constructor() {
                super('Assassin', 3, 200, 7);
                this.moveSpeed = 5;
                this.teleportCooldown = 5000;
                this.lastTeleportTime = 0;
                this.stealthDuration = 3000;
                this.isStealthActive = false;
                this.lastStealthTime = 0;
            }

            teleport() {
                const currentTime = Date.now();
                if (currentTime - this.lastTeleportTime >= this.teleportCooldown) {
                    const safeX = Math.random() * (width - 60) + 30;
                    const safeY = Math.random() * (height - 60) + 30;
                    centerX = safeX;
                    centerY = safeY;
                    this.lastTeleportTime = currentTime;
                    setTimeout(() => {
                        centerX = width / 2;
                        centerY = height / 2;
                    }, 3000);
                    addLogMessage("Assassin teleported to safety!");
                }
            }

            toggleStealth() {
                const currentTime = Date.now();
                if (!this.isStealthActive && currentTime - this.lastStealthTime >= this.teleportCooldown) {
                    this.isStealthActive = true;
                    this.lastStealthTime = currentTime;
                    setTimeout(() => {
                        this.isStealthActive = false;
                    }, this.stealthDuration);
                    addLogMessage("Assassin entered stealth mode!");
                }
            }

            update() {
                const currentTime = Date.now();
                const teleportCooldownRemaining = Math.max(0, this.teleportCooldown - (currentTime - this.lastTeleportTime));
                const stealthCooldownRemaining = Math.max(0, this.teleportCooldown - (currentTime - this.lastStealthTime));
                
                if (this.isStealthActive) {
                    const stealthTimeRemaining = Math.max(0, this.stealthDuration - (currentTime - this.lastStealthTime));
                    abilityIndicator.textContent = `Stealth: ${Math.floor(stealthTimeRemaining / 1000)}s`;
                } else if (teleportCooldownRemaining === 0 && stealthCooldownRemaining === 0) {
                    abilityIndicator.textContent = 'Teleport & Stealth: Ready';
                } else {
                    abilityIndicator.textContent = `Teleport: ${Math.ceil(teleportCooldownRemaining / 1000)}s | Stealth: ${Math.ceil(stealthCooldownRemaining / 1000)}s`;
                }
            }
        }

        class Boss {
            constructor() {
                this.x = width / 2;
                this.y = height / 4;
                this.radius = 50;
                this.health = 10000;
                this.maxHealth = 10000;
                this.color = '#ff0000';
                this.attackCooldown = 2000;
                this.lastAttackTime = 0;
                this.attackPatterns = [
                    this.laserAttack,
                    this.bulletHellAttack,
                    this.shockwaveAttack
                ];
            }

            update() {
                const currentTime = Date.now();
                if (currentTime - this.lastAttackTime >= this.attackCooldown) {
                    const randomAttack = this.attackPatterns[Math.floor(Math.random() * this.attackPatterns.length)];
                    randomAttack.call(this);
                    this.lastAttackTime = currentTime;
                }
                bossFill.style.width = `${(this.health / this.maxHealth) * 100}%`;
            }

            laserAttack() {
                const angle = Math.atan2(centerY - this.y, centerX - this.x);
                const laserEnd = {
                    x: this.x + Math.cos(angle) * Math.max(width, height),
                    y: this.y + Math.sin(angle) * Math.max(width, height)
                };
                
                // Visual effect
                particles.push(...Array(20).fill().map(() => createParticle(
                    this.x + Math.random() * 100 - 50,
                    this.y + Math.random() * 100 - 50,
                    '#ff0000',
                    5,
                    10
                )));

                // Damage calculation
                if (Math.abs(angle - Math.atan2(centerY - this.y, centerX - this.x)) < Math.PI / 8) {
                    if (!playerCharacter.isStealthActive) {
                        gameOver();
                    }
                }

                addLogMessage("Boss fired a laser beam!");
            }

            bulletHellAttack() {
                for (let i = 0; i < 36; i++) {
                    const angle = (i / 36) * Math.PI * 2;
                    enemies.push({
                        x: this.x,
                        y: this.y,
                        radius: 5,
                        velocity: {
                            x: Math.cos(angle) * 3,
                            y: Math.sin(angle) * 3
                        },
                        color: '#ff0000',
                        health: 1,
                        maxHealth: 1
                    });
                }
                addLogMessage("Boss unleashed a bullet hell attack!");
            }

            shockwaveAttack() {
                const shockwave = {
                    x: this.x,
                    y: this.y,
                    radius: 0,
                    maxRadius: Math.max(width, height),
                    color: 'rgba(255, 0, 0, 0.5)'
                };

                const expandShockwave = setInterval(() => {
                    shockwave.radius += 10;
                    if (shockwave.radius >= shockwave.maxRadius) {
                        clearInterval(expandShockwave);
                    }

                    const distToPlayer = Math.hypot(centerX - this.x, centerY - this.y);
                    if (Math.abs(distToPlayer - shockwave.radius) < 20 && !playerCharacter.isStealthActive) {
                        gameOver();
                    }
                }, 16);

                addLogMessage("Boss created a shockwave!");
            }

            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.fillStyle = this.color;
                ctx.fill();

                // Health bar
                ctx.fillStyle = 'red';
                ctx.fillRect(this.x - this.radius, this.y - this.radius - 10, this.radius * 2, 5);
                ctx.fillStyle = 'green';
                ctx.fillRect(this.x - this.radius, this.y - this.radius - 10, (this.health / this.maxHealth) * this.radius * 2, 5);
            }
        }

        function initializeUpgrades() {
            upgradeDefinitions.forEach(upgrade => {
                upgrades[upgrade.type] = { level: 0, cost: upgrade.baseCost };
            });
        }

        function resizeCanvas() {
            width = window.innerWidth;
            height = window.innerHeight;
            canvas.width = width;
            canvas.height = height;
            centerX = width / 2;
            centerY = height / 2;
            if (boss) {
                boss.x = width / 2;
                boss.y = height / 4;
            }
        }

        function createParticle(x, y, color, size = 2, speed = 3) {
            return {
                x, y,
                radius: Math.random() * size + 1,
                color,
                velocity: {
                    x: (Math.random() - 0.5) * speed,
                    y: (Math.random() - 0.5) * speed
                },
                alpha: 1
            };
        }

        function createEnemy() {
            const radius = Math.random() * 20 + 10;
            let x, y;
            if (Math.random() < 0.5) {
                x = Math.random() < 0.5 ? 0 - radius : width + radius;
                y = Math.random() * height;
            } else {
                x = Math.random() * width;
                y = Math.random() < 0.5 ? 0 - radius : height + radius;
            }
            const angle = Math.atan2(centerY - y, centerX - x);
            const speed = (1 + Math.random() * 0.5 * Math.log(level)) * difficulty;
            const velocity = {
                x: Math.cos(angle) * speed,
                y: Math.sin(angle) * speed
            };
            return {
                x, y, radius, velocity,
                color: `hsl(${Math.random() * 360}, 50%, 50%)`,
                health: 10 * level * difficulty,
                maxHealth: 10 * level * difficulty
            };
        }

        function updateParticles() {
            particles.forEach((particle, index) => {
                particle.x += particle.velocity.x;
                particle.y += particle.velocity.y;
                particle.alpha -= 0.01;
                if (particle.alpha <= 0) {
                    particles.splice(index, 1);
                }
            });
        }

        function updateEnemies() {
            if (!isTimeStopActive) {
                const timeSlowFactor = 1 - (0.1 * upgrades[UPGRADE_TYPES.TIME_SLOW].level);
                enemies.forEach((enemy, index) => {
                    enemy.x += enemy.velocity.x * timeSlowFactor;
                    enemy.y += enemy.velocity.y * timeSlowFactor;

                    if (Math.hypot(centerX - enemy.x, centerY - enemy.y) < enemy.radius + 30) {
                        if (isHackEnabled || upgrades[UPGRADE_TYPES.SHIELD].level > 0) {
                            enemies.splice(index, 1);
                            for (let i = 0; i < 8; i++) {
                                particles.push(createParticle(enemy.x, enemy.y, '#0ff'));
                            }
                        } else if (!playerCharacter.isStealthActive) {
                            gameOver();
                        }
                    }
                });
            }
        }

        function updateProjectiles() {
            projectiles.forEach((projectile, pIndex) => {
                projectile.x += projectile.velocity.x;
                projectile.y += projectile.velocity.y;

                // Bounce logic (only for Shotgunner)
                if (playerCharacter instanceof Shotgunner && projectile.bounceCount > 0) {
                    if (projectile.x - projectile.radius <= 0 || projectile.x + projectile.radius >= width) {
                        projectile.velocity.x = -projectile.velocity.x;
                        projectile.bounceCount--;
                    }
                    if (projectile.y - projectile.radius <= 0 || projectile.y + projectile.radius >= height) {
                        projectile.velocity.y = -projectile.velocity.y;
                        projectile.bounceCount--;
                    }
                }

                if (projectile.x < 0 || projectile.x > width || projectile.y < 0 || projectile.y > height) {
                    if (!(playerCharacter instanceof Shotgunner) || projectile.bounceCount <= 0) {
                        projectiles.splice(pIndex, 1);
                    }
                    return;
                }

                // Homing logic
                if (upgrades[UPGRADE_TYPES.HOMING].level > 0) {
                    const target = isBossMode ? boss : enemies.reduce((closest, enemy) => {
                        const distance = Math.hypot(projectile.x - enemy.x, projectile.y - enemy.y);
                        return distance < closest.distance ? { enemy, distance } : closest;
                    }, { enemy: null, distance: Infinity }).enemy;

                    if (target) {
                        const angle = Math.atan2(target.y - projectile.y, target.x - projectile.x);
                        const homingStrength = 0.1 * upgrades[UPGRADE_TYPES.HOMING].level;
                        projectile.velocity.x += Math.cos(angle) * homingStrength;
                        projectile.velocity.y += Math.sin(angle) * homingStrength;
                        
                        // Normalize velocity to maintain constant speed
                        const speed = Math.hypot(projectile.velocity.x, projectile.velocity.y);
                        projectile.velocity.x = (projectile.velocity.x / speed) * projectile.speed;
                        projectile.velocity.y = (projectile.velocity.y / speed) * projectile.speed;
                    }
                }

                if (isBossMode) {
                    const dist = Math.hypot(projectile.x - boss.x, projectile.y - boss.y);
                    if (dist - boss.radius - projectile.radius < 1) {
                        boss.health -= projectile.damage;
                        if (boss.health <= 0) {
                            gameOver(true);
                        }
                        projectiles.splice(pIndex, 1);
                    }
                } else {
                    enemies.forEach((enemy, eIndex) => {
                        const dist = Math.hypot(projectile.x - enemy.x, projectile.y - enemy.y);
                        if (dist - enemy.radius - projectile.radius < 1) {
                            enemy.health -= projectile.damage;

                            if (upgrades[UPGRADE_TYPES.EXPLOSION].level > 0) {
                                const explosionRadius = 50 * upgrades[UPGRADE_TYPES.EXPLOSION].level;
                                enemies.forEach(otherEnemy => {
                                    const explosionDist = Math.hypot(enemy.x - otherEnemy.x, enemy.y - otherEnemy.y);
                                    if (explosionDist < explosionRadius) {
                                        otherEnemy.health -= projectile.damage * 0.5;
                                    }
                                });
                                for (let i = 0; i < 8; i++) {
                                    particles.push(createParticle(enemy.x, enemy.y, '#f00', 3, 5));
                                }
                            }

                            if (upgrades[UPGRADE_TYPES.CHAIN_LIGHTNING].level > 0) {
                                let chainCount = upgrades[UPGRADE_TYPES.CHAIN_LIGHTNING].level;
                                let lastEnemy = enemy;
                                while (chainCount > 0) {
                                    const closestEnemy = enemies.find(e => e !== lastEnemy && Math.hypot(e.x - lastEnemy.x, e.y - lastEnemy.y) < 100);
                                    if (closestEnemy) {
                                        closestEnemy.health -= projectile.damage * 0.3;
                                        lastEnemy = closestEnemy;
                                        chainCount--;
                                        for (let i = 0; i < 4; i++) {
                                            particles.push(createParticle(closestEnemy.x, closestEnemy.y, '#ff0', 2, 4));
                                        }
                                    } else {
                                        break;
                                    }
                                }
                            }

                            if (enemy.health <= 0) {
                                enemies.splice(eIndex, 1);
                                let pointsGained = 10 * level;
                                if (playerCharacter instanceof DefaultCharacter && projectile.doublePoints) {
                                    pointsGained *= 2;
                                }
                                points += pointsGained;
                                for (let i = 0; i < 8; i++) {
                                    particles.push(createParticle(enemy.x, enemy.y, enemy.color, 3, 5));
                                }
                            }

                            projectile.pierceCount--;
                            if (projectile.pierceCount <= 0) {
                                projectiles.splice(pIndex, 1);
                            }
                        }
                    });
                }
            });
        }

        function shoot(event) {
            const currentTime = Date.now();
            const fireRate = playerCharacter.fireRate / (1 + 0.1 * upgrades[UPGRADE_TYPES.FIRE_RATE].level);
            if (currentTime - lastShotTime < fireRate) return;

            lastShotTime = currentTime;

            const targetX = event.clientX;
            const targetY = event.clientY;

            const newProjectiles = playerCharacter.shoot(centerX, centerY, targetX, targetY);
            if (Array.isArray(newProjectiles)) {
                projectiles.push(...newProjectiles);
            } else {
                projectiles.push(newProjectiles);
            }

            // Apply multi-shot upgrade
            const multiShot = upgrades[UPGRADE_TYPES.MULTI_SHOT].level;
            if (multiShot > 0) {
                for (let i = 1; i <= multiShot; i++) {
                    const angle = Math.atan2(targetY - centerY, targetX - centerX);
                    const spread = (i / (multiShot + 1) - 0.5) * (Math.PI / 9);
                    const newTargetX = centerX + Math.cos(angle + spread) * 1000;
                    const newTargetY = centerY + Math.sin(angle + spread) * 1000;
                    const additionalProjectiles = playerCharacter.shoot(centerX, centerY, newTargetX, newTargetY);
                    if (Array.isArray(additionalProjectiles)) {
                        projectiles.push(...additionalProjectiles);
                    } else {
                        projectiles.push(additionalProjectiles);
                    }
                }
            }
        }

        function activateSpecialAbility() {
            const abilities = [
                { name: "Black Hole", condition: upgrades[UPGRADE_TYPES.BLACK_HOLE].level > 0, action: activateBlackHole },
                { name: "Laser Beam", condition: upgrades[UPGRADE_TYPES.LASER_BEAM].level > 0, action: activateLaserBeam },
                { name: "Quantum Leap", condition: upgrades[UPGRADE_TYPES.QUANTUM_LEAP].level > 0, action: activateQuantumLeap },
                { name: "Meteor Shower", condition: upgrades[UPGRADE_TYPES.METEOR_SHOWER].level > 0, action: activateMeteorShower }
            ];

            const availableAbilities = abilities.filter(ability => ability.condition);
            if (availableAbilities.length > 0) {
                const randomAbility = availableAbilities[Math.floor(Math.random() * availableAbilities.length)];
                randomAbility.action();
            } else {
                // Fallback to original special ability if no new abilities are unlocked
                if (isBossMode) {
                    boss.health -= 500;
                    if (boss.health <= 0) {
                        gameOver(true);
                    }
                } else {
                    enemies.forEach(enemy => {
                        enemy.health -= 50 * level;
                        if (enemy.health <= 0) {
                            enemies = enemies.filter(e => e !== enemy);
                            let pointsGained = 20 * level;
                            if (playerCharacter instanceof DefaultCharacter) {
                                pointsGained *= 2;
                            }
                            points += pointsGained;
                        }
                    });
                }
                for (let i = 0; i < 50; i++) {
                    particles.push(createParticle(Math.random() * width, Math.random() * height, '#f0f', 4, 8));
                }
                addLogMessage("Special ability activated!");
            }
        }

        function draw() {
            ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
            ctx.fillRect(0, 0, width, height);

            particles.forEach(particle => {
                ctx.beginPath();
                ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);
                ctx.fillStyle = particle.color;
                ctx.globalAlpha = particle.alpha;
                ctx.fill();
                ctx.globalAlpha = 1;
            });

            if (isBossMode) {
                boss.draw();
            } else {
                enemies.forEach(enemy => {
                    ctx.beginPath();
                    ctx.arc(enemy.x, enemy.y, enemy.radius, 0, Math.PI * 2);
                    ctx.fillStyle = enemy.color;
                    ctx.fill();

                    // Health bar
                    ctx.fillStyle = 'red';
                    ctx.fillRect(enemy.x - enemy.radius, enemy.y - enemy.radius - 10, enemy.radius * 2, 5);
                    ctx.fillStyle = 'green';
                    ctx.fillRect(enemy.x - enemy.radius, enemy.y - enemy.radius - 10, (enemy.health / enemy.maxHealth) * enemy.radius * 2, 5);
                });
            }

            projectiles.forEach(projectile => {
                ctx.beginPath();
                ctx.arc(projectile.x, projectile.y, projectile.radius, 0, Math.PI * 2);
                ctx.fillStyle = projectile.color;
                ctx.fill();
            });

            // Draw player
            ctx.beginPath();
            ctx.arc(centerX, centerY, 20, 0, Math.PI * 2);
            ctx.fillStyle = playerCharacter instanceof Assassin ? '#ff00ff' : 
                            playerCharacter instanceof Shotgunner ? '#ffa500' : '#0ff';
            ctx.fill();

            // Draw shield if active
            if (upgrades[UPGRADE_TYPES.SHIELD].level > 0 || isHackEnabled) {
                ctx.beginPath();
                ctx.arc(centerX, centerY, 30, 0, Math.PI * 2);
                ctx.strokeStyle = '#0ff';
                ctx.lineWidth = 2;
                ctx.stroke();
            }

            // Draw stealth effect for Assassin
            if (playerCharacter instanceof Assassin && playerCharacter.isStealthActive) {
                ctx.globalAlpha = 0.5;
                ctx.beginPath();
                ctx.arc(centerX, centerY, 25, 0, Math.PI * 2);
                ctx.fillStyle = 'rgba(255, 0, 255, 0.3)';
                ctx.fill();
                ctx.globalAlpha = 1;
            }
        }

        function updateUI() {
            document.getElementById('levelDisplay').textContent = level;
            document.getElementById('pointsDisplay').textContent = Math.floor(points);
            document.getElementById('dpsDisplay').textContent = Math.floor(dps);
            powerFill.style.width = `${powerMeter}%`;
        }

        function addLogMessage(message) {
            const gameLog = document.getElementById('gameLog');
            const logEntry = document.createElement('p');
            logEntry.textContent = message;
            gameLog.appendChild(logEntry);
            gameLog.scrollTop = gameLog.scrollHeight;

            // Remove old messages if there are too many
            while (gameLog.children.length > 50) {
                gameLog.removeChild(gameLog.firstChild);
            }
        }

        function updateTimeStop() {
            if (timeStopCooldown > 0) {
                timeStopCooldown -= 16; // Assuming 60 FPS
                if (timeStopCooldown <= 0) {
                    timeStopCooldown = 0;
                    timeStopUsesLeft = timeStopMaxUses;
                }
            }

            document.getElementById('cooldownIndicator').textContent = 
                timeStopUsesLeft > 0 ? `Time Stop: Ready (${timeStopUsesLeft} left)` : 
                `Time Stop: Cooldown ${Math.ceil(timeStopCooldown / 1000)}s`;

            timeStopBtn.disabled = timeStopUsesLeft === 0;
        }

        function activateTimeStop() {
            if (timeStopUsesLeft > 0) {
                isTimeStopActive = true;
                timeStopUsesLeft--;
                setTimeout(() => {
                    isTimeStopActive = false;
                    if (timeStopUsesLeft === 0) {
                        timeStopCooldown = 30000; // 30 seconds cooldown
                    }
                }, timeStopDuration);
                addLogMessage("Time Stop activated!");
            }
        }

        function gameLoop() {
            if (isGameOver) return;

            updateParticles();
            if (isBossMode) {
                boss.update();
            } else {
                updateEnemies();
            }
            updateProjectiles();
            updateTimeStop();
            playerCharacter.update();
            draw();
            updateUI();

            if (!isTimeStopActive && !isBossMode && Math.random() < 0.02 + level * 0.002 * difficulty) {
                enemies.push(createEnemy());
            }

            const currentTime = Date.now();
            if (currentTime - lastPowerMeterIncrease >= 100) {
                const powerMeterIncreaseRate = playerCharacter instanceof DefaultCharacter ? 0.15 : 0.09;
                powerMeter = Math.min(100, powerMeter + powerMeterIncreaseRate);
                lastPowerMeterIncrease = currentTime;
            }

            if (powerMeter === 100) {
                activateSpecialAbility();
                powerMeter = 0;
            }

            dps = projectiles.length * playerCharacter.baseDamage * (1 + 0.1 * upgrades[UPGRADE_TYPES.DAMAGE].level);

            animationFrameId = requestAnimationFrame(gameLoop);
        }

        function showUpgradeMenu() {
            upgradeMenu.innerHTML = '';
            upgradeDefinitions.forEach(upgrade => {
                const button = document.createElement('button');
                button.className = 'button';
                button.textContent = `${upgrade.name} (${upgrades[upgrade.type].cost} points) - Level ${upgrades[upgrade.type].level}`;
                button.onclick = () => purchaseUpgrade(upgrade.type);
                upgradeMenu.appendChild(button);
            });
            const closeButton = document.createElement('button');
            closeButton.className = 'button';
            closeButton.textContent = 'Close';
            closeButton.onclick = () => {
                upgradeMenu.style.display = 'none';
                resumeGame();
            };
            upgradeMenu.appendChild(closeButton);
            upgradeMenu.style.display = 'block';
            pauseGame();
        }

        function purchaseUpgrade(type) {
            const upgrade = upgrades[type];
            if (points >= upgrade.cost || isHackEnabled) {
                if (!isHackEnabled) points -= upgrade.cost;
                upgrade.level++;
                upgrade.cost = Math.floor(upgrade.cost * upgradeDefinitions.find(u => u.type === type).scaling);
                
                if (type === UPGRADE_TYPES.BOUNCE && playerCharacter instanceof Shotgunner) {
                    playerCharacter.bounceCount = upgrade.level;
                } else if (type === UPGRADE_TYPES.DOUBLE_POINTS && playerCharacter instanceof DefaultCharacter) {
                    playerCharacter.doublePointsActive = true;
                } else if (type === UPGRADE_TYPES.STEALTH_DURATION && playerCharacter instanceof Assassin) {
                    playerCharacter.stealthDuration = 3000 + 1000 * upgrade.level;
                }
                
                showUpgradeMenu();
                addLogMessage(`Upgraded ${upgradeDefinitions.find(u => u.type === type).name} to level ${upgrade.level}`);
            }
        }

        function gameOver(victory = false) {
            isGameOver = true;
            cancelAnimationFrame(animationFrameId);
            gameOverScreen.style.display = 'flex';
            finalScoreDisplay.textContent = Math.floor(points);
            if (victory) {
                addLogMessage("Congratulations! You defeated the boss!");
            } else {
                addLogMessage("Game Over! Final score: " + Math.floor(points));
            }
            submitScore(Math.floor(points));
        }

        function restartGame() {
            isGameOver = false;
            gameOverScreen.style.display = 'none';
            modeSelect.style.display = 'flex';
            level = 1;
            points = 0;
            powerMeter = 0;
            enemies = [];
            projectiles = [];
            particles = [];
            boss = null;
            isBossMode = false;
            initializeUpgrades();
            document.getElementById('gameLog').innerHTML = '';
            document.getElementById('bossMeter').style.display = 'none';
            addLogMessage("New game started!");
        }

                function setGameMode(mode) {
            isBossMode = mode === 'boss';
            modeSelect.style.display = 'none';
            characterSelect.style.display = 'flex';
            if (isBossMode) {
                document.getElementById('bossMeter').style.display = 'block';
                boss = new Boss();
                playerCharacter = new Assassin(); // Force Assassin for boss mode
                startGame();
            }
        }

        function selectCharacter(characterType) {
            if (!isBossMode) {
                switch(characterType) {
                    case 'default':
                        playerCharacter = new DefaultCharacter();
                        break;
                    case 'shotgunner':
                        playerCharacter = new Shotgunner();
                        break;
                    case 'assassin':
                        playerCharacter = new Assassin();
                        break;
                }
            }
            characterSelect.style.display = 'none';
            startGame();
        }

        function enableHacks() {
            isHackEnabled = true;
            points += 1000000;
            addLogMessage("Hacks enabled! 1,000,000 points added.");
        }

        function pauseGame() {
            isPaused = true;
            cancelAnimationFrame(animationFrameId);
            canvas.classList.add('paused');
        }

        function resumeGame() {
            isPaused = false;
            canvas.classList.remove('paused');
            gameLoop();
        }

        function startGame() {
            resizeCanvas();
            initializeUpgrades();

            window.addEventListener('resize', resizeCanvas);
            canvas.addEventListener('click', shoot);
            upgradeBtn.addEventListener('click', showUpgradeMenu);
            timeStopBtn.addEventListener('click', activateTimeStop);
            window.addEventListener('keydown', function(event) {
                if (event.key === '9') {
                    enableHacks();
                } else if (playerCharacter instanceof Assassin) {
                    if (event.key === 'Shift') {
                        playerCharacter.teleport();
                    } else if (event.key === 'Control') {
                        playerCharacter.toggleStealth();
                    }
                }
            });

            setInterval(() => {
                if (!isGameOver && !isPaused && !isBossMode) {
                    level++;
                    timeStopMaxUses = Math.min(5, Math.floor(level / 5) + 1);
                    timeStopUsesLeft = Math.min(timeStopUsesLeft + 1, timeStopMaxUses);
                    addLogMessage(`Advanced to level ${level}! Time Stop uses increased.`);
                }
            }, 60000 / difficulty);

            addLogMessage("Game started! Click to shoot enemies.");
            gameLoop();
        }

        function filterOffensiveWords(name) {
            const offensiveWords = ['badword1', 'badword2', 'badword3']; // Add more offensive words to this list
            let filteredName = name;
            offensiveWords.forEach(word => {
                const regex = new RegExp(word, 'gi');
                filteredName = filteredName.replace(regex, '*'.repeat(word.length));
            });
            return filteredName;
        }

        function submitScore(score) {
            const playerName = filterOffensiveWords(prompt("Enter your name for the leaderboard:"));
            if (playerName) {
                const scoreData = { name: playerName, score: score, character: playerCharacter.name, mode: isBossMode ? 'Boss' : 'Survival' };
                
                // In a real implementation, you would send this data to a server
                // For this example, we'll use localStorage to simulate server storage
                let leaderboard = JSON.parse(localStorage.getItem('leaderboard')) || [];
                leaderboard.push(scoreData);
                leaderboard.sort((a, b) => b.score - a.score);
                leaderboard = leaderboard.slice(0, 10); // Keep only top 10 scores
                localStorage.setItem('leaderboard', JSON.stringify(leaderboard));
                
                updateLeaderboard();
            }
        }

        function updateLeaderboard() {
            const leaderboard = JSON.parse(localStorage.getItem('leaderboard')) || [];
            leaderboardDiv.innerHTML = '<h3>Leaderboard</h3>';
            leaderboard.forEach((entry, index) => {
                const scoreEntry = document.createElement('p');
                scoreEntry.textContent = `${index + 1}. ${entry.name}: ${entry.score} (${entry.character} - ${entry.mode})`;
                leaderboardDiv.appendChild(scoreEntry);
            });
        }

        startBtn.addEventListener('click', () => {
            titleScreen.style.display = 'none';
            modeSelect.style.display = 'flex';
        });
        survivalBtn.addEventListener('click', () => setGameMode('survival'));
        bossBtn.addEventListener('click', () => setGameMode('boss'));
        defaultBtn.addEventListener('click', () => selectCharacter('default'));
        shotgunnerBtn.addEventListener('click', () => selectCharacter('shotgunner'));
        assassinBtn.addEventListener('click', () => selectCharacter('assassin'));
        restartBtn.addEventListener('click', restartGame);
        leaderboardBtn.addEventListener('click', () => {
            leaderboardDiv.style.display = leaderboardDiv.style.display === 'none' ? 'block' : 'none';
            updateLeaderboard();
        });

        // Initial setup
        updateLeaderboard();

        // Start the game when the window loads
        window.onload = function() {
            titleScreen.style.display = 'flex';
        };
    </script>
</body>
</html>
